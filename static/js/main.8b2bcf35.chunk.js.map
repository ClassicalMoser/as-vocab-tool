{"version":3,"sources":["logo.svg","SentenceRetriever.js","App.js","reportWebVitals.js","index.js"],"names":["TABLE","NAME","ID","FIELDS","wordIdiom","use","partOfSpeech","frequencyRank","vocabName","spanishExample","englishTranslation","vocabIncluded","spanglish","lesson","SentenceRetriever","useState","userToken","setUserToken","vocabTable","setVocabTable","examplesTable","setExamplesTable","lessonsTable","setLessonsTable","searchTerm","setSearchTerm","targetVocabList","setTargetVocabList","vocabIncludedSearchList","setVocabIncludedSearchList","noSpanglish","setNoSpanglish","exampleList","setExampleList","createLocalTable","tableName","jsonData","newArr","data","map","row","name","value","spanish","english","createBody2","addToTargetVocabList","e","term","preventDefault","id","Date","now","fetchTableFromQuickbase","fetch","method","headers","body","JSON","stringify","then","res","ok","arrayBuffer","buffer","text","TextDecoder","decode","console","log","json","parse","resBody","Promise","reject","status","catch","err","useEffect","listToFilterBy","length","newList","filter","exampleObject","vocab","toLowerCase","includes","newList2","getFilteredExamples","onSubmit","target","type","className","onChange","vocabObject","toString","onClick","lessonObj","find","element","shuffledList","i","newIndex","Math","floor","random","oldValue","copiedText","example","join","navigator","clipboard","writeText","checked","for","style","textAlign","display","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b2bcf35.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState, useEffect} from 'react'\r\n\r\nconst IS_DATABASE_ASCII = true\r\n\r\nconst TABLE = {\r\n    VOCABULARY: {\r\n        NAME: 'vocabulary',\r\n        ID: 'brrcdgyix',\r\n        FIELDS: {\r\n            // id: 3,\r\n            wordIdiom: 6,\r\n            use: 7,\r\n            partOfSpeech: 8,\r\n            frequencyRank: 14,\r\n            vocabName: 17\r\n        }\r\n    },\r\n    EXAMPLES: {\r\n        NAME: 'examples',\r\n        ID: 'brrcdgyjw',\r\n        FIELDS: {\r\n            // id: 3,\r\n            spanishExample: 6,\r\n            englishTranslation: 7,\r\n            vocabIncluded: 15,\r\n            spanglish: 13\r\n        }\r\n    },\r\n    LESSONS: {\r\n        NAME: 'lessons',\r\n        ID: 'brrtcungb',\r\n        FIELDS: {\r\n            lesson: 6,\r\n            vocabIncluded: 11\r\n        }\r\n    },\r\n    VOCABULARY_EXAMPLES: 'brrcdgykk'\r\n}\r\n\r\nexport default function SentenceRetriever() {\r\n    const [userToken, setUserToken] = useState('')\r\n\r\n    const [vocabTable, setVocabTable] = useState([])\r\n    const [examplesTable, setExamplesTable] = useState([])\r\n    const [lessonsTable, setLessonsTable] = useState([])\r\n\r\n    const [allSuggestedVocabList, setAllSuggestedVocabList] = useState([]) // total suggested vocab list\r\n    const [searchTerm, setSearchTerm] = useState('') // for string in search bar that changes the vocab list on every change\r\n\r\n    const [targetVocabList, setTargetVocabList] = useState([]) // list of all the strings that will be queries from the examples table (the custom vocab search list)\r\n    const [vocabIncludedSearchList, setVocabIncludedSearchList] = useState([]) // this will be the one that actually gets searched\r\n    const [noSpanglish, setNoSpanglish] = useState(false)\r\n\r\n    const [exampleList, setExampleList] = useState([]) // example list to be displayed in the table at bottom\r\n    const [whereClause, setWhereClause] = useState('')\r\n\r\n    // new function\r\n    function createLocalTable(tableName, jsonData) {\r\n        let newArr\r\n        switch(tableName) {\r\n            \r\n            case TABLE.VOCABULARY.NAME:\r\n                newArr = jsonData.data.map(row => {\r\n                    return {\r\n                        name: row[TABLE.VOCABULARY.FIELDS.vocabName].value,\r\n                        partOfSpeech: row[TABLE.VOCABULARY.FIELDS.partOfSpeech].value,\r\n                        frequencyRank: row[TABLE.VOCABULARY.FIELDS.frequencyRank].value\r\n                    }\r\n                })       \r\n                setVocabTable(newArr)\r\n                return\r\n            case TABLE.EXAMPLES.NAME:\r\n                newArr = jsonData.data.map(row => {\r\n                    return {\r\n                        spanish: row[TABLE.EXAMPLES.FIELDS.spanishExample].value,\r\n                        english: row[TABLE.EXAMPLES.FIELDS.englishTranslation].value,\r\n                        vocabIncluded: row[TABLE.EXAMPLES.FIELDS.vocabIncluded].value,\r\n                        spanglish: row[TABLE.EXAMPLES.FIELDS.spanglish].value\r\n                    }\r\n                })\r\n                setExamplesTable(newArr)\r\n                return\r\n                //setExampleList(examplesTable)\r\n            case TABLE.LESSONS.NAME:\r\n                newArr = jsonData.data.map(row => {\r\n                    return {\r\n                        lesson: row[TABLE.LESSONS.FIELDS.lesson].value,\r\n                        vocabIncluded: row[TABLE.LESSONS.FIELDS.vocabIncluded].value\r\n                    }\r\n                })\r\n                //console.log('lesson arr')\r\n                //console.log(newArr)\r\n                setLessonsTable(newArr)\r\n            default:\r\n                //\r\n        }\r\n    }\r\n\r\n    function createHeaders() {\r\n        const headers = {\r\n            'QB-Realm-Hostname': 'masterofmemory.quickbase.com',\r\n            'User-Agent': 'NickApp',\r\n            'Authorization': userToken,\r\n            'Content-Type': 'application/json'\r\n        }\r\n        return headers\r\n    }\r\n\r\n    //combined version of vocab & exmpales\r\n    function createBody2(tableName) {\r\n        let body\r\n        switch(tableName) {\r\n            case TABLE.VOCABULARY.NAME:\r\n                body = {\r\n                    \"from\": TABLE.VOCABULARY.ID,\r\n                    \"select\": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],\r\n                }\r\n                return body\r\n            case TABLE.EXAMPLES.NAME:\r\n                body = {\r\n                    \"from\": TABLE.EXAMPLES.ID,\r\n                    \"select\": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],\r\n                    //\"where\": whereClause\r\n                }\r\n                return body\r\n            case TABLE.LESSONS.NAME:\r\n                body = {\r\n                    \"from\": TABLE.LESSONS.ID,\r\n                    \"select\": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],\r\n                }\r\n                return body\r\n            default:\r\n                //\r\n        }\r\n    }\r\n\r\n    function getFilteredResults() { // for vocab\r\n        //return allSuggestedVocabList.filter(vocabObject => vocabObject.name.toString().toLowerCase().includes(searchTerm.toLowerCase()))\r\n        return vocabTable.filter(vocabObject => vocabObject.name.toString().toLowerCase().includes(searchTerm.toLowerCase()))\r\n    }\r\n\r\n    function getFilteredExamples() {\r\n        const listToFilterBy = vocabIncludedSearchList\r\n        if(listToFilterBy.length != 0) {\r\n            const newList = examplesTable.filter(exampleObject => {\r\n                for(const vocab of listToFilterBy) {\r\n                    // checks if tagged words contatin search word\r\n                    for(const element of exampleObject.vocabIncluded) {\r\n                        if(element.toLowerCase().includes(vocab.name.toLowerCase())) {\r\n                            return true\r\n                        }\r\n                    }\r\n                }\r\n                return false\r\n            })\r\n            //const newList2 = noSpanglish ? newList.filter(exampleObject => {return exampleObject.spanglish !== null ? exampleObject.spanglish === 'esp' : false }) : newList\r\n            const newList2 = noSpanglish ? newList.filter(exampleObject => exampleObject.spanglish === 'esp') : newList\r\n            //console.log(newList2)\r\n            setExampleList(newList2)\r\n        } else {\r\n            const newList =  noSpanglish ? examplesTable.filter(exampleObject => exampleObject.spanglish === 'esp') : examplesTable\r\n            setExampleList(newList)\r\n        }\r\n    }\r\n\r\n    function addToTargetVocabList(e, term) {\r\n        e.preventDefault()\r\n        setTargetVocabList([...targetVocabList, { id: Date.now(), name: term}])\r\n        //\r\n        //console.log(\"filtered-----------------\")\r\n        //getFilteredExamples()\r\n    }\r\n    function removeFromTargetVocabList(id) {\r\n        setTargetVocabList(targetVocabList.filter(term => term.id !== id))\r\n    }\r\n\r\n    // the newest & current version\r\n    function fetchTableFromQuickbase(tableName) {\r\n        fetch('https://api.quickbase.com/v1/records/query',\r\n            {\r\n            method: 'POST',\r\n            headers: createHeaders(),\r\n            body: JSON.stringify(createBody2(tableName))\r\n            })\r\n        .then(res => {\r\n            if (res.ok) {\r\n                if(IS_DATABASE_ASCII) {\r\n                    return res.arrayBuffer().then(buffer => {\r\n                        const decoder = new TextDecoder('ASCII')\r\n                        const text = decoder.decode(buffer)\r\n                        console.log(tableName)\r\n                        console.log('text decoder')\r\n                        console.log(text)\r\n            \r\n                        const json = JSON.parse(text)\r\n            \r\n                        console.log('json')\r\n                        console.log(json)\r\n\r\n                        createLocalTable(tableName, json)\r\n            \r\n                    })\r\n                }\r\n            return res.json().then(res => createLocalTable(tableName, res));\r\n            }\r\n            return res.json().then(resBody => Promise.reject({status: res.status, ...resBody}));\r\n        })\r\n        \r\n        .catch(err => console.log(err))\r\n\r\n    }\r\n\r\n\r\n\r\n    function shuffleExampleList() {        \r\n        const shuffledList = [...exampleList]\r\n\r\n        for(let i = shuffledList.length; i > 0; i--) {\r\n            const newIndex = Math.floor(Math.random() * (i - 1))\r\n            const oldValue = shuffledList[newIndex]\r\n            shuffledList[newIndex] = shuffledList[i - 1]\r\n            shuffledList[i - 1] = oldValue\r\n        }\r\n\r\n        setExampleList(shuffledList)\r\n    }\r\n\r\n    function copySentences() {\r\n        const englishSentences = exampleList.map(example => {\r\n            return example.english\r\n        }).join('\\n')\r\n        const spanishSentences = exampleList.map(example => {\r\n            return example.spanish\r\n        }).join('\\n')\r\n        //\r\n        const copiedText = englishSentences + '\\n\\n' + spanishSentences\r\n\r\n        //console.log(englishSentences)\r\n        navigator.clipboard.writeText(copiedText)\r\n    }\r\n\r\n    function handleOnChangeNoSpanglish(e) {\r\n        e.preventDefault()\r\n\r\n    }\r\n/*\r\n    useEffect(() => {\r\n        fetchTableFromQuickbase(TABLE.VOCABULARY.NAME)\r\n        fetchTableFromQuickbase(TABLE.EXAMPLES.NAME)\r\n        //console.log('fetching from lessons')\r\n        \r\n        setExampleList(examplesTable)\r\n\r\n        fetchTableFromQuickbase(TABLE.LESSONS.NAME)\r\n        console.log(lessonsTable)\r\n    }, [])\r\n*/\r\n    useEffect(() => {\r\n        getFilteredExamples()\r\n    }, [noSpanglish, vocabIncludedSearchList])\r\n\r\n    useEffect(() => {\r\n        console.log('user token is now: ' + userToken)\r\n\r\n        fetchTableFromQuickbase(TABLE.VOCABULARY.NAME)\r\n        fetchTableFromQuickbase(TABLE.EXAMPLES.NAME)\r\n        //console.log('fetching from lessons')\r\n        \r\n        setExampleList(examplesTable)\r\n\r\n        fetchTableFromQuickbase(TABLE.LESSONS.NAME)\r\n        console.log(lessonsTable)\r\n\r\n    }, [userToken])\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={(e) => {\r\n                e.preventDefault()\r\n                setUserToken(e.target[0].value)\r\n                }} >\r\n                <input type='text'></input>\r\n            </form>\r\n            <h1>Sentence Lookup</h1>\r\n            <table>\r\n                <tr>\r\n                    <td className='suggestions'>\r\n                        <form onSubmit={(e) => {\r\n                            addToTargetVocabList(e, searchTerm)\r\n                            setSearchTerm('')\r\n                        }}>\r\n                            <input className='suggestions-searchbar' type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)}></input>\r\n                            <button>Add to search query &gt;&gt;</button>\r\n                        </form>\r\n                        <ul className='suggestions-content'>\r\n                            {getFilteredResults().map(vocab => {\r\n                                return (<li key={vocab.id} onClick={(e) => addToTargetVocabList(e, vocab.name)}>{vocab.name}</li>)\r\n                            })}\r\n                        </ul>\r\n                    </td>\r\n                    <td className='chosen-vocab'>\r\n                        {/** <button onClick={getFilteredExamples}>Retrieve Sentences</button> */}\r\n                        <button onClick={() => setVocabIncludedSearchList(targetVocabList)}>Retrieve Sentences</button>\r\n                        \r\n                        \r\n                        <div>\r\n                            {targetVocabList.map(term => {\r\n                                return (<button className='chosen-vocab-term' key={term.id} onClick={()=>removeFromTargetVocabList(term.id)}>[{term.name}] </button>)\r\n                            })}\r\n                        </div>\r\n\r\n                        <br />\r\n                        <form onSubmit={(e) => {\r\n                            e.preventDefault()\r\n                            console.log(e.target[0].value)\r\n                            const lessonObj = lessonsTable.find(element => element.lesson === e.target[0].value)\r\n                            console.log(lessonObj.vocabIncluded)\r\n                            const newArr = lessonObj.vocabIncluded.map((element, id) => {return ( { id: id, name: element })})\r\n                            setVocabIncludedSearchList(newArr)\r\n                            \r\n                        }}>\r\n                            \r\n                            <select name='lessonSelect'>\r\n                                {lessonsTable.map(lesson => {\r\n                                    return(<option value={lesson.lesson}>{lesson.lesson}</option>)\r\n                                })}\r\n                                \r\n                            </select>\r\n                            \r\n                            <input type='submit' value='Retrieve by Lesson'></input>\r\n                        </form>\r\n                    </td>\r\n                    \r\n                </tr>\r\n            </table>\r\n\r\n\r\n            \r\n            <button onClick={shuffleExampleList}>Shuffle Sentences</button>\r\n            <button onClick={copySentences}>Copy Sentences</button>\r\n            \r\n            <input type='checkbox' onChange={(e) => {\r\n                setNoSpanglish(e.target.checked)\r\n                //getFilteredExamples()\r\n            } } name='spanglishCheckbox' ></input><label for='spanglishCheckbox'>No Spanglish?</label>\r\n            \r\n            <label style={{textAlign: 'right', display: 'block'}}>Number of results: {exampleList.length}  </label>\r\n\r\n            <table className='sentence-table'>\r\n                <tr>\r\n                    <th>Spanish</th>\r\n                    <th>English</th>\r\n                    <th>Vocab/Idioms</th>\r\n                </tr>\r\n                {exampleList.map(exampleObject => {\r\n                    return (<tr key={exampleObject.id}>\r\n                        <td>{exampleObject.id} {exampleObject.spanish}</td>\r\n                        <td>{exampleObject.english}</td>\r\n                        <td>{exampleObject.vocabIncluded.map(vocab => {\r\n                            return(<button className='vocab-included-button' >{vocab}</button>)\r\n                        })}</td>\r\n                    </tr>)\r\n                })}\r\n            </table>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import logo from './logo.svg';\nimport './QuizApp.css';\nimport SentenceRetriever from './SentenceRetriever'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SentenceRetriever />\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}