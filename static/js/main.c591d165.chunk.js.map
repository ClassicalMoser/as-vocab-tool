{"version":3,"sources":["logo.svg","SentenceRetriever.js","App.js","reportWebVitals.js","index.js"],"names":["TABLE","NAME","ID","FIELDS","wordIdiom","use","partOfSpeech","frequencyRank","vocabName","spanishExample","englishTranslation","vocabIncluded","spanglish","lesson","LESSON_ORDER","SentenceRetriever","useState","userToken","setUserToken","vocabTable","setVocabTable","examplesTable","setExamplesTable","lessonsTable","setLessonsTable","searchTerm","setSearchTerm","targetVocabList","setTargetVocabList","vocabIncludedSearchList","setVocabIncludedSearchList","selectedLesson","setSelectedLesson","noSpanglish","setNoSpanglish","noOtherVocab","setNoOtherVocab","exampleList","setExampleList","createLocalTable","tableName","jsonData","newArr","data","map","row","name","value","spanish","english","createBody2","getFilteredExamples","listToFilterBy","newFilteredExampleList","length","vocabIncludedList","filteredExampleList","example","isValidExample","vocab","element","includes","retrieveExamplesByLesson","filter","exampleObject","toLowerCase","retrieveExamplesByCustomSearch","addToTargetVocabList","e","term","preventDefault","id","Date","now","fetchTableFromQuickbase","fetch","method","headers","body","JSON","stringify","then","res","ok","arrayBuffer","buffer","text","TextDecoder","decode","json","parse","resBody","Promise","reject","status","catch","err","console","log","useEffect","ut","URLSearchParams","window","location","search","get","hidden","onSubmit","target","type","className","onChange","vocabObject","toString","onClick","vilist","lessonName","targetVocabIncludedList","lessonNameIndex","indexOf","retreiveVocabIncludedByLesson","shuffledList","i","newIndex","Math","floor","random","oldValue","copiedText","join","navigator","clipboard","writeText","checked","for","style","textAlign","display","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c591d165.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState, useEffect} from 'react'\r\n\r\nconst IS_DATABASE_ASCII = true\r\n\r\nconst TABLE = {\r\n    VOCABULARY: {\r\n        NAME: 'vocabulary',\r\n        ID: 'brrcdgyix',\r\n        FIELDS: {\r\n            // id: 3,\r\n            wordIdiom: 6,\r\n            use: 7,\r\n            partOfSpeech: 8,\r\n            frequencyRank: 14,\r\n            vocabName: 17\r\n        }\r\n    },\r\n    EXAMPLES: {\r\n        NAME: 'examples',\r\n        ID: 'brrcdgyjw',\r\n        FIELDS: {\r\n            // id: 3,\r\n            spanishExample: 6,\r\n            englishTranslation: 7,\r\n            vocabIncluded: 15,\r\n            spanglish: 13\r\n        }\r\n    },\r\n    LESSONS: {\r\n        NAME: 'lessons',\r\n        ID: 'brrtcungb',\r\n        FIELDS: {\r\n            lesson: 6,\r\n            vocabIncluded: 11\r\n        }\r\n    },\r\n    VOCABULARY_EXAMPLES: 'brrcdgykk'\r\n}\r\n\r\nconst LESSON_ORDER = ['SI1M Lesson 1', 'SI1M Lesson 2', 'SI1M Lesson 3', 'SI1M Lesson 4', 'SI1M Lesson 5', 'SI1M Lesson 6', 'SI1M Lesson 7', 'SI1M Lesson 8', 'SI1M Lesson 9', 'SI1M Lesson 10', 'SI1M Lesson 11', 'SI1M Lesson 12', 'SI1M Lesson 13', 'SI1M Lesson 14', 'SI1M Lesson 15', 'SI1M Lesson 16', 'SI1M Lesson 17', 'SI1M Lesson 18', 'SI1M Lesson 19', 'SI1M Lesson 20' ]\r\n\r\nexport default function SentenceRetriever() {\r\n    //const queryParams = new URLSearchParams(window.location.search)\r\n    //const ut = queryParams.get('ut')\r\n    //console.log('ut: ', ut)\r\n\r\n    const [userToken, setUserToken] = useState('')\r\n    //setUserToken(ut)\r\n\r\n    const [vocabTable, setVocabTable] = useState([])\r\n    const [examplesTable, setExamplesTable] = useState([])\r\n    const [lessonsTable, setLessonsTable] = useState([])\r\n\r\n    const [allSuggestedVocabList, setAllSuggestedVocabList] = useState([]) // total suggested vocab list\r\n    const [searchTerm, setSearchTerm] = useState('') // for string in search bar that changes the vocab list on every change\r\n\r\n    const [targetVocabList, setTargetVocabList] = useState([]) // list of all the strings that will be queries from the examples table (the custom vocab search list)\r\n    const [vocabIncludedSearchList, setVocabIncludedSearchList] = useState([]) // this will be the one that actually gets searched\r\n\r\n    const [selectedLesson, setSelectedLesson] = useState('SI1M Lesson 1')\r\n\r\n    const [noSpanglish, setNoSpanglish] = useState(false)\r\n    const [noOtherVocab, setNoOtherVocab] = useState(false)\r\n\r\n    const [exampleList, setExampleList] = useState([]) // example list to be displayed in the table at bottom\r\n    const [whereClause, setWhereClause] = useState('')\r\n\r\n    // for search by lesson\r\n    // this retrieves the selected lesson's vocabIncluded along with all previous lessons' vocabIncluded\r\n    // for example lesson 2 contains all of lesson 2 & lesson 1's vocab\r\n    function retreiveVocabIncludedByLesson(lessonName) {\r\n        let targetVocabIncludedList = []\r\n        if(LESSON_ORDER.includes(lessonName)) {\r\n            //console.log('retreive ' + lessonName)\r\n            const lessonNameIndex = LESSON_ORDER.indexOf(lessonName)\r\n            //console.log(lessonNameIndex)\r\n            LESSON_ORDER.map((element, id) => {\r\n                if(id <= lessonNameIndex) {\r\n                    //console.log('less than')\r\n                    lessonsTable.map(lesson => {\r\n                        //console.log(lesson.lesson + ' ' + element)\r\n                        if(lesson.lesson === element) {\r\n                            //console.log('equals')\r\n                            targetVocabIncludedList = [...targetVocabIncludedList, ...lesson.vocabIncluded]\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        }\r\n\r\n        //targetVocabIncludedList = ['en - \\\"on\\\"', 'ser - ser infinitive']\r\n        const newArr = targetVocabIncludedList.map((element, id) => {return ( { id: id, name: element })})\r\n        return newArr\r\n    }\r\n\r\n    // new function\r\n    function createLocalTable(tableName, jsonData) {\r\n        let newArr\r\n        switch(tableName) {\r\n            \r\n            case TABLE.VOCABULARY.NAME:\r\n                newArr = jsonData.data.map(row => {\r\n                    return {\r\n                        name: row[TABLE.VOCABULARY.FIELDS.vocabName].value,\r\n                        partOfSpeech: row[TABLE.VOCABULARY.FIELDS.partOfSpeech].value,\r\n                        frequencyRank: row[TABLE.VOCABULARY.FIELDS.frequencyRank].value\r\n                    }\r\n                })       \r\n                setVocabTable(newArr)\r\n                return\r\n            case TABLE.EXAMPLES.NAME:\r\n                newArr = jsonData.data.map(row => {\r\n                    return {\r\n                        spanish: row[TABLE.EXAMPLES.FIELDS.spanishExample].value,\r\n                        english: row[TABLE.EXAMPLES.FIELDS.englishTranslation].value,\r\n                        vocabIncluded: row[TABLE.EXAMPLES.FIELDS.vocabIncluded].value,\r\n                        spanglish: row[TABLE.EXAMPLES.FIELDS.spanglish].value\r\n                    }\r\n                })\r\n                setExamplesTable(newArr)\r\n                return\r\n                //setExampleList(examplesTable)\r\n            case TABLE.LESSONS.NAME:\r\n                newArr = jsonData.data.map(row => {\r\n                    return {\r\n                        lesson: row[TABLE.LESSONS.FIELDS.lesson].value,\r\n                        vocabIncluded: row[TABLE.LESSONS.FIELDS.vocabIncluded].value\r\n                    }\r\n                })\r\n                //console.log('lesson arr')\r\n                //console.log(newArr)\r\n                setLessonsTable(newArr)\r\n            default:\r\n                //\r\n        }\r\n    }\r\n\r\n    function createHeaders() {\r\n        const headers = {\r\n            'QB-Realm-Hostname': 'masterofmemory.quickbase.com',\r\n            'User-Agent': 'NickApp',\r\n            'Authorization': userToken,\r\n            'Content-Type': 'application/json'\r\n        }\r\n        return headers\r\n    }\r\n\r\n    //combined version of vocab & exmpales\r\n    function createBody2(tableName) {\r\n        let body\r\n        switch(tableName) {\r\n            case TABLE.VOCABULARY.NAME:\r\n                body = {\r\n                    \"from\": TABLE.VOCABULARY.ID,\r\n                    \"select\": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],\r\n                }\r\n                return body\r\n            case TABLE.EXAMPLES.NAME:\r\n                body = {\r\n                    \"from\": TABLE.EXAMPLES.ID,\r\n                    \"select\": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],\r\n                    //\"where\": whereClause\r\n                }\r\n                return body\r\n            case TABLE.LESSONS.NAME:\r\n                body = {\r\n                    \"from\": TABLE.LESSONS.ID,\r\n                    \"select\": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],\r\n                }\r\n                return body\r\n            default:\r\n                //\r\n        }\r\n    }\r\n\r\n    function getFilteredResults() { // for vocab\r\n        //return allSuggestedVocabList.filter(vocabObject => vocabObject.name.toString().toLowerCase().includes(searchTerm.toLowerCase()))\r\n        return vocabTable.filter(vocabObject => vocabObject.name.toString().toLowerCase().includes(searchTerm.toLowerCase()))\r\n    }\r\n\r\n    // for search by lesson\r\n    // this retrieves the selected lesson's vocab included along with all previous lessons\r\n    function retrieveExamplesByLesson(vocabIncludedList) {\r\n        //console.log('retrieve Examp by lesson')\r\n        let filteredExampleList = []\r\n        let count = 0\r\n        if(vocabIncludedList.length != 0) {\r\n\r\n\r\n            examplesTable.map(example => {\r\n                let isValidExample = true\r\n                if(example.vocabIncluded.length == 0) {\r\n                    isValidExample = false\r\n                    count++\r\n                }\r\n                example.vocabIncluded.map(vocab => {\r\n                    if(!vocabIncludedList.map(element => element.name).includes(vocab)) {\r\n                        isValidExample = false\r\n                        \r\n                    }\r\n                })\r\n                if(isValidExample) {\r\n                    // add example to return list\r\n                    //console.log(example)\r\n                    filteredExampleList = [...filteredExampleList, example]\r\n                }\r\n            })\r\n        }\r\n        //console.log('count ' + count)\r\n        //console.log(filteredExampleList)\r\n        \r\n        return filteredExampleList\r\n    }\r\n\r\n    function retrieveExamplesByCustomSearch(vocabIncludedList) {\r\n        let filteredExampleList = []\r\n        if(vocabIncludedList.length != 0) {\r\n            filteredExampleList = examplesTable.filter(exampleObject => {\r\n                for(const vocab of vocabIncludedList) {\r\n                    // checks if tagged words contatin search word\r\n                    for(const element of exampleObject.vocabIncluded) {\r\n                        if(element.toLowerCase().includes(vocab.name.toLowerCase())) {\r\n                            return true\r\n                        }\r\n                    }\r\n                }\r\n                return false\r\n            })\r\n        }\r\n        return filteredExampleList\r\n    }\r\n\r\n    function getFilteredExamples() {\r\n        const listToFilterBy = vocabIncludedSearchList\r\n        let newFilteredExampleList = []\r\n\r\n        if(listToFilterBy.length != 0) {\r\n            if(noOtherVocab) {\r\n                newFilteredExampleList = retrieveExamplesByLesson(listToFilterBy)\r\n            } else {\r\n                newFilteredExampleList = retrieveExamplesByCustomSearch(listToFilterBy)\r\n            }\r\n\r\n            newFilteredExampleList = noSpanglish ? newFilteredExampleList.filter(exampleObject => exampleObject.spanglish === 'esp') : newFilteredExampleList\r\n            setExampleList(newFilteredExampleList)\r\n\r\n            /*\r\n            const newList = examplesTable.filter(exampleObject => {\r\n                for(const vocab of listToFilterBy) {\r\n                    // checks if tagged words contatin search word\r\n                    for(const element of exampleObject.vocabIncluded) {\r\n                        if(element.toLowerCase().includes(vocab.name.toLowerCase())) {\r\n                            return true\r\n                        }\r\n                    }\r\n                }\r\n                return false\r\n            })\r\n            //const newList2 = noSpanglish ? newList.filter(exampleObject => {return exampleObject.spanglish !== null ? exampleObject.spanglish === 'esp' : false }) : newList\r\n            const newList2 = noSpanglish ? newList.filter(exampleObject => exampleObject.spanglish === 'esp') : newList\r\n            //console.log(newList2)\r\n            setExampleList(newList2)\r\n        } else {\r\n            const newList =  noSpanglish ? examplesTable.filter(exampleObject => exampleObject.spanglish === 'esp') : examplesTable\r\n            setExampleList(newList)\r\n            */\r\n        }\r\n    }\r\n\r\n    function addToTargetVocabList(e, term) {\r\n        e.preventDefault()\r\n        setTargetVocabList([...targetVocabList, { id: Date.now(), name: term}])\r\n        //\r\n        //console.log(\"filtered-----------------\")\r\n        //getFilteredExamples()\r\n    }\r\n    function removeFromTargetVocabList(id) {\r\n        setTargetVocabList(targetVocabList.filter(term => term.id !== id))\r\n    }\r\n\r\n    // the newest & current version\r\n    function fetchTableFromQuickbase(tableName) {\r\n        fetch('https://api.quickbase.com/v1/records/query',\r\n            {\r\n            method: 'POST',\r\n            headers: createHeaders(),\r\n            body: JSON.stringify(createBody2(tableName))\r\n            })\r\n        .then(res => {\r\n            if (res.ok) {\r\n                if(IS_DATABASE_ASCII) {\r\n                    return res.arrayBuffer().then(buffer => {\r\n                        const decoder = new TextDecoder('ASCII')\r\n                        const text = decoder.decode(buffer)\r\n                        //console.log(tableName)\r\n                        //console.log('text decoder')\r\n                        //console.log(text)\r\n            \r\n                        const json = JSON.parse(text)\r\n            \r\n                        //console.log('json')\r\n                        //console.log(json)\r\n\r\n                        createLocalTable(tableName, json)\r\n            \r\n                    })\r\n                }\r\n            return res.json().then(res => createLocalTable(tableName, res));\r\n            }\r\n            return res.json().then(resBody => Promise.reject({status: res.status, ...resBody}));\r\n        })\r\n        \r\n        .catch(err => console.log(err))\r\n\r\n    }\r\n\r\n\r\n\r\n    function shuffleExampleList() {        \r\n        const shuffledList = [...exampleList]\r\n\r\n        for(let i = shuffledList.length; i > 0; i--) {\r\n            const newIndex = Math.floor(Math.random() * (i - 1))\r\n            const oldValue = shuffledList[newIndex]\r\n            shuffledList[newIndex] = shuffledList[i - 1]\r\n            shuffledList[i - 1] = oldValue\r\n        }\r\n\r\n        setExampleList(shuffledList)\r\n    }\r\n\r\n    function copySentences() {\r\n        const englishSentences = exampleList.map(example => {\r\n            return example.english\r\n        }).join('\\n')\r\n        const spanishSentences = exampleList.map(example => {\r\n            return example.spanish\r\n        }).join('\\n')\r\n        //\r\n        const copiedText = englishSentences + '\\n\\n' + spanishSentences\r\n\r\n        //console.log(englishSentences)\r\n        navigator.clipboard.writeText(copiedText)\r\n    }\r\n\r\n    function copyTable() {\r\n        const headers = 'Spanish\\tEnglish\\n'\r\n        const table = exampleList.map(example => {\r\n            return example.spanish + '\\t' + example.english\r\n        }).join('\\n')\r\n\r\n        const copiedText = headers + table\r\n        navigator.clipboard.writeText(copiedText)\r\n    }\r\n\r\n    function handleOnChangeNoSpanglish(e) {\r\n        e.preventDefault()\r\n\r\n    }\r\n/*\r\n    useEffect(() => {\r\n        fetchTableFromQuickbase(TABLE.VOCABULARY.NAME)\r\n        fetchTableFromQuickbase(TABLE.EXAMPLES.NAME)\r\n        //console.log('fetching from lessons')\r\n        \r\n        setExampleList(examplesTable)\r\n\r\n        fetchTableFromQuickbase(TABLE.LESSONS.NAME)\r\n        console.log(lessonsTable)\r\n    }, [])\r\n*/\r\n    useEffect(() => {\r\n        getFilteredExamples()\r\n    }, [noSpanglish, noOtherVocab, vocabIncludedSearchList])\r\n\r\n    useEffect(() => {\r\n        //console.log('user token is now: ' + userToken)\r\n\r\n        fetchTableFromQuickbase(TABLE.VOCABULARY.NAME)\r\n        fetchTableFromQuickbase(TABLE.EXAMPLES.NAME)\r\n        //console.log('fetching from lessons')\r\n        \r\n        setExampleList(examplesTable)\r\n\r\n        fetchTableFromQuickbase(TABLE.LESSONS.NAME)\r\n        //console.log(lessonsTable)\r\n\r\n    }, [userToken])\r\n\r\n    useEffect(() => {\r\n        \r\n        const queryParams = new URLSearchParams(window.location.search)\r\n        const ut = queryParams.get('ut')\r\n        //console.log('ut: ', ut)\r\n\r\n        \r\n        setUserToken(ut)\r\n        \r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <form hidden onSubmit={(e) => {\r\n                e.preventDefault()\r\n                setUserToken(e.target[0].value)\r\n                }} >\r\n                <input type='text'></input>\r\n            </form>\r\n            <h1>Sentence Lookup</h1>\r\n            <table>\r\n                <tr>\r\n                    <td className='suggestions'>\r\n                        <form onSubmit={(e) => {\r\n                            addToTargetVocabList(e, searchTerm)\r\n                            setSearchTerm('')\r\n                        }}>\r\n                            <input className='suggestions-searchbar' type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)}></input>\r\n                            <button>Add to search query &gt;&gt;</button>\r\n                        </form>\r\n                        <ul className='suggestions-content'>\r\n                            {getFilteredResults().map(vocab => {\r\n                                return (<li key={vocab.id} onClick={(e) => addToTargetVocabList(e, vocab.name)}>{vocab.name}</li>)\r\n                            })}\r\n                        </ul>\r\n                    </td>\r\n                    <td className='chosen-vocab'>\r\n                        {/** <button onClick={getFilteredExamples}>Retrieve Sentences</button> */}\r\n                        <button onClick={() => {\r\n                            setVocabIncludedSearchList(targetVocabList)\r\n                            setNoOtherVocab(false)\r\n                        }}>Retrieve Sentences</button>\r\n                        \r\n                        \r\n                        <div>\r\n                            {targetVocabList.map(term => {\r\n                                return (<button className='chosen-vocab-term' key={term.id} onClick={()=>removeFromTargetVocabList(term.id)}>[{term.name}] </button>)\r\n                            })}\r\n                        </div>\r\n\r\n                        <br />\r\n                        <form onSubmit={(e) => {\r\n                            setNoOtherVocab(true)\r\n                            e.preventDefault()\r\n                            //console.log(e.target[0].value)\r\n                            const vilist = retreiveVocabIncludedByLesson(e.target[0].value)\r\n                            setVocabIncludedSearchList(vilist)\r\n                            /*\r\n                            retrieveExamplesByLesson(vilist)\r\n                            const lessonObj = lessonsTable.find(element => element.lesson === e.target[0].value)\r\n                            console.log(lessonObj.vocabIncluded)\r\n                            const newArr = lessonObj.vocabIncluded.map((element, id) => {return ( { id: id, name: element })})\r\n                            setVocabIncludedSearchList(newArr)\r\n                            */\r\n                            \r\n                        }}>\r\n                            \r\n                            <select name='lessonSelect' onChange={(e) => setSelectedLesson(e.target.value)}>\r\n                                {lessonsTable.map(lesson => {\r\n                                    return(<option value={lesson.lesson}>{lesson.lesson}</option>)\r\n                                })}\r\n                                \r\n                            </select>\r\n                            \r\n                            <input type='submit' value='Retrieve by Lesson'></input>\r\n                        </form>\r\n                        {lessonsTable.map(lesson => {\r\n                            if(lesson.lesson === selectedLesson) {\r\n                                return(<ul className='lesson-vocab'>{lesson.vocabIncluded.map(vocab => {return(<li>{vocab}</li>)})}</ul>)\r\n                            }\r\n                        })}\r\n                    </td>\r\n                    \r\n                </tr>\r\n            </table>\r\n\r\n\r\n            \r\n            <button onClick={shuffleExampleList}>Shuffle Sentences</button>\r\n            <button onClick={copySentences}>Copy as List</button>\r\n            <button onClick={copyTable}>Copy as Table</button>\r\n            \r\n            <input type='checkbox' onChange={(e) => {\r\n                setNoSpanglish(e.target.checked)\r\n                //getFilteredExamples()\r\n            } } name='spanglishCheckbox' ></input><label for='spanglishCheckbox'>No Spanglish?</label>\r\n            \r\n            <label style={{textAlign: 'right', display: 'block'}}>Number of results: {exampleList.length}  </label>\r\n\r\n            <table className='sentence-table'>\r\n                <tr>\r\n                    <th>Spanish</th>\r\n                    <th>English</th>\r\n                    <th>Vocab/Idioms</th>\r\n                </tr>\r\n                {exampleList.map(exampleObject => {\r\n                    return (<tr key={exampleObject.id}>\r\n                        <td>{exampleObject.id} {exampleObject.spanish}</td>\r\n                        <td>{exampleObject.english}</td>\r\n                        <td>{exampleObject.vocabIncluded.map(vocab => {\r\n                            return(<button className='vocab-included-button' >{vocab}</button>)\r\n                        })}</td>\r\n                    </tr>)\r\n                })}\r\n            </table>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import logo from './logo.svg';\nimport './QuizApp.css';\nimport SentenceRetriever from './SentenceRetriever'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SentenceRetriever />\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}